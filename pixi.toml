[project]
name = "momentum"
channels = ["nvidia", "conda-forge", "pytorch"]
platforms = ["linux-64", "osx-arm64", "win-64"]
version = "0.1.0"
description = "A library providing foundational algorithms for human kinematic motion and numerical optimization solvers to apply human motion in various applications"
license = "MIT"
readme = "README.md"
homepage = "https://facebookincubator.github.io/momentum/"
repository = "https://github.com/facebookincubator/momentum"

[build-dependencies]
boost = ">=1.84.0,<1.85"
cmake = "3.27.6"
c-compiler = "1.7.0.*"
cxx-compiler = "1.7.0.*"
ninja = "1.11.1.*"
rerun-sdk = ">=0.16,<0.17"
pip = ">=24.0,<25"
pytest = ">=8.2.0,<8.3"
scipy = ">=1.13.0,<1.14"
setuptools = ">=69.5.1,<69.6"

[dependencies]
blas = ">=1.1,<3"
ceres-solver = ">=2.2.0,<2.3"
cli11 = ">=2.4.1,<2.5"
dispenso = ">=1.3.0,<1.4"
eigen = "3.4.0.*"
ezc3d = "1.5.9.*"
drjit-cpp = ">=0.4.6,<0.5"
fmt = "10.2.1.*"
fx-gltf = ">=2.0.0,<2.1"
librerun-sdk = ">=0.16,<0.17"
ms-gsl = ">=4.0.0,<4.1"
nlohmann_json = "3.11.*"
openssl = ">=3.2.1,<3.3"
re2 = "2023.9.1.*"
sophus = ">=1!1.24.6,<1!1.25"
spdlog = ">=1.12.0,<1.13"
openfbx = ">=0.9,<1"

[tasks]
clean = { cmd = "rm -rf build && rm -rf .pixi && rm pixi.lock" }
configure = { cmd = "cmake -S . -B build -G Ninja -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DCMAKE_BUILD_TYPE=Release -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON -DMOMENTUM_BUILD_TESTING=ON -DMOMENTUM_BUILD_EXAMPLES=ON -DMOMENTUM_BUILD_PYMOMENTUM=ON", inputs = [
    "CMakeLists.txt",
] }
build = { cmd = "cmake --build build -j --target all", depends_on = [
    "configure",
] }
test = { cmd = "ctest --test-dir build --output-on-failure", depends_on = [
    "build",
] }
hello_world = { cmd = "build/hello_world", depends_on = ["build"] }
convert_model = { cmd = "build/convert_model", depends_on = ["build"] }
c3d_viewer = { cmd = "build/c3d_viewer", depends_on = ["build"] }
fbx_viewer = { cmd = "build/fbx_viewer", depends_on = ["build"] }
glb_viewer = { cmd = "build/glb_viewer", depends_on = ["build"] }
process_markers = { cmd = "build/process_markers_app", depends_on = ["build"] }
install = { cmd = "cmake --build build -j --target install", depends_on = [
    "build",
] }

#===========
# linux-64
#===========

[target.linux-64.build-dependencies]
clang-format-18 = ">=18.1.2,<19"

[target.linux-64.dependencies]
pytorch = ">=2.1.2,<2.2"
sysroot_linux-64 = ">=2.28"

[target.linux-64.tasks]
lint = { cmd = "clang-format-18 -i axel/**/*.h axel/**/*.cpp momentum/**/*.h momentum/**/*.cpp pymomentum/**/*.h pymomentum/**/*.cpp" }
build_pymomentum = { cmd = "pip install -e ." }
test_pymomentum = { cmd = "pytest pymomentum/test/test_closest_points.py pymomentum/test/test_fbx.py pymomentum/test/test_parameter_transform.py pymomentum/test/test_quaternion.py pymomentum/test/test_skel_state.py pymomentum/test/test_skeleton.py", env = { MOMENTUM_MODELS_PATH = "momentum/" } }

#============
# osx-arm64
#============

[target.osx-arm64.build-dependencies]
clang-format-18 = ">=18.1.2,<19"

[target.osx-arm64.dependencies]
pytorch = ">=2.1.2,<2.2"

[target.osx-arm64.tasks]
lint = { cmd = "clang-format-18 -i axel/**/*.h axel/**/*.cpp momentum/**/*.h momentum/**/*.cpp pymomentum/**/*.h pymomentum/**/*.cpp" }
build = { cmd = "cmake --build build -j --target all", depends_on = [
    "configure",
] }
build_pymomentum = { cmd = "pip install -e ." }

#=========
# win-64
#=========

[target.win-64.dependencies]
pytorch-cuda = ">=12.1,<13"

[target.win-64.tasks]
configure = { cmd = "cmake -S . -B build -G 'Visual Studio 17 2022' -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DBUILD_SHARED_LIBS=OFF -DMOMENTUM_BUILD_IO_FBX=ON -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON -DMOMENTUM_BUILD_TESTING=ON -DMOMENTUM_BUILD_EXAMPLES=ON -DMOMENTUM_BUILD_PYMOMENTUM=OFF", inputs = [
    "CMakeLists.txt",
] }
open_vs = { cmd = "cmd /c start build\\momentum.sln", depends_on = [
    "configure",
] }
build = { cmd = "cmake --build build -j --config Release", depends_on = [
    "configure",
] }
test = { cmd = "ctest --test-dir build --output-on-failure --build-config Release", depends_on = [
    "build",
] }
hello_world = { cmd = "build/Release/hello_world.exe", depends_on = ["build"] }
convert_model = { cmd = "build/Release/convert_model.exe", depends_on = [
    "build",
] }
c3d_viewer = { cmd = "build/Release/c3d_viewer.exe", depends_on = ["build"] }
fbx_viewer = { cmd = "build/Release/fbx_viewer.exe", depends_on = ["build"] }
glb_viewer = { cmd = "build/Release/glb_viewer.exe", depends_on = ["build"] }
process_markers = { cmd = "build/Release/process_markers_app.exe", depends_on = [
    "build",
] }
install = { cmd = "cmake --build build -j --target install --config Release", depends_on = [
    "build",
] }
