[project]
name = "momentum"
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]
version = "0.1.0"
description = "A library providing foundational algorithms for human kinematic motion and numerical optimization solvers to apply human motion in various applications"
license = "MIT"
readme = "README.md"
homepage = "https://facebookincubator.github.io/momentum/"
repository = "https://github.com/facebookincubator/momentum"

[build-dependencies]
boost = ">=1.84.0,<2"
c-compiler = ">=1.9.0,<2"
clang-format = "==18.1.3"
cmake = ">=3.31.6,<4"
cxx-compiler = ">=1.9.0,<2"
gtest = ">=1.16.0,<2"
ninja = ">=1.12.1,<2"
rerun-sdk = ">=0.21.0,<0.22"
pip = ">=25.0.1,<26"
pybind11 = ">=2.13.6,<3"
pytest = ">=8.3.5,<9"
scipy = ">=1.15.2,<2"
setuptools = ">=75.8.2,<76"
sphinx = ">=8.1.3,<9"
sphinx-rtd-theme = ">=3.0.1,<4"
tracy-profiler-gui = ">=0.11.1,<0.12"

[dependencies]
blas = ">=2.131,<3"
ceres-solver = ">=2.2.0,<3"
cli11 = ">=2.5.0,<3"
dispenso = ">=1.4.0,<2"
eigen = ">=3.4.0,<4"
ezc3d = ">=1.5.18,<2"
drjit-cpp = ">=1.0.5,<2"
fmt = ">=11.1.4,<12"
fx-gltf = ">=2.0.0,<3"
librerun-sdk = ">=0.21.0,<0.22"
ms-gsl = ">=4.2.0,<5"
nlohmann_json = ">=3.11.3,<4"
openfbx = ">=0.9,<0.10"
openssl = ">=3.4.1,<4"
pytorch = ">=2.6.0,<3"
re2 = ">=2024.7.2,<2025"
spdlog = ">=1.15.1,<2"
tracy-profiler-client = ">=0.11.1,<0.12"
urdfdom = ">=4.0.1,<5"

[tasks]
clean = { cmd = """
    rm -rf build \
    && rm -rf .pixi \
    && rm pixi.lock
    """ }
lint = { cmd = "clang-format -i axel/**/*.h axel/**/*.cpp momentum/**/*.h momentum/**/*.cpp pymomentum/**/*.h pymomentum/**/*.cpp" }
config = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/release \
        -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DMOMENTUM_BUILD_IO_FBX=$MOMENTUM_BUILD_IO_FBX \
        -DMOMENTUM_BUILD_TESTING=ON \
        -DMOMENTUM_BUILD_EXAMPLES=ON \
        -DMOMENTUM_BUILD_PYMOMENTUM=$MOMENTUM_BUILD_PYMOMENTUM \
        -DMOMENTUM_ENABLE_PROFILING=ON \
        -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
        -DMOMENTUM_INSTALL_EXAMPLES=ON \
        -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
        -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
        -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
        -DMOMENTUM_USE_SYSTEM_TRACY=ON
    """, env = { MOMENTUM_BUILD_IO_FBX = "OFF", MOMENTUM_ENABLE_SIMD = "ON", MOMENTUM_BUILD_PYMOMENTUM = "ON" } }
config_dev = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/debug \
        -G Ninja \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DMOMENTUM_BUILD_IO_FBX=$MOMENTUM_BUILD_IO_FBX \
        -DMOMENTUM_BUILD_TESTING=ON \
        -DMOMENTUM_BUILD_EXAMPLES=ON \
        -DMOMENTUM_BUILD_PYMOMENTUM=$MOMENTUM_BUILD_PYMOMENTUM \
        -DMOMENTUM_ENABLE_PROFILING=ON \
        -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
        -DMOMENTUM_INSTALL_EXAMPLES=ON \
        -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
        -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
        -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
        -DMOMENTUM_USE_SYSTEM_TRACY=ON
    """, env = { MOMENTUM_BUILD_IO_FBX = "OFF", MOMENTUM_ENABLE_SIMD = "ON", MOMENTUM_BUILD_PYMOMENTUM = "ON" } }
build = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp/release -j --target all", depends-on = [
    "config",
] }
build_dev = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp/debug -j --target all", depends-on = [
    "config_dev",
] }
test = { cmd = "ctest --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp/release --output-on-failure", depends-on = [
    "build",
] }
test_dev = { cmd = "ctest --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp/debug --output-on-failure", depends-on = [
    "build_dev",
] }
hello_world = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/hello_world", depends-on = [
    "build",
] }
convert_model = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/convert_model", depends-on = [
    "build",
] }
c3d_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/c3d_viewer", depends-on = [
    "build",
] }
fbx_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/fbx_viewer", depends-on = [
    "build",
] }
glb_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/glb_viewer", depends-on = [
    "build",
] }
urdf_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/urdf_viewer", depends-on = [
    "build",
] }
process_markers = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/process_markers_app", depends-on = [
    "build",
] }
refine_motion = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/release/refine_motion", depends-on = [
    "build",
] }
install = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp/release -j --target install", depends-on = [
    "build",
] }
tracy = { cmd = "tracy-profiler" }
test_py = { cmd = "pytest pymomentum/test/*.py", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
    "build_py",
] }
doc_py = { cmd = "sphinx-build -a -E -b html pymomentum/doc build/python_api_doc", depends-on = [
    "build_py",
] }
open_doc_py = { cmd = "open build/python_api_doc/index.html", depends-on = [
    "doc_py",
] }

#===========
# linux-64
#===========

[target.linux-64.build-dependencies]
nvtx-c = ">=3.1.0" # TODO: Add to pytorch as run dep

[target.linux-64.dependencies]
sysroot_linux-64 = ">=2.28"

[target.linux-64.tasks]
# TODO: Check sha256 of fbx202037_fbxsdk_linux
install_fbxsdk = { cmd = """
    mkdir -p .deps \
        && curl -fsSL https://damassets.autodesk.net/content/dam/autodesk/www/files/fbx202037_fbxsdk_gcc_linux.tar.gz -o .deps/fbx_sdk.tar.gz \
        && mkdir -p .deps/fbxsdk_download \
        && tar -xzf .deps/fbx_sdk.tar.gz -C .deps/fbxsdk_download \
        && rm .deps/fbx_sdk.tar.gz \
        && chmod ugo+x .deps/fbxsdk_download/fbx202037_fbxsdk_linux \
        && mkdir -p .deps/fbxsdk/2020.3.7 \
        && yes yes | .deps/fbxsdk_download/fbx202037_fbxsdk_linux .deps/fbxsdk/2020.3.7 \
        && rm -rf .deps/fbxsdk_download/fbx202037_fbxsdk_linux
""", outputs = [
    ".deps/fbxsdk/2020.3.7",
] }
install_deps = { depends-on = ["install_fbxsdk"] }
config = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/release \
        -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DMOMENTUM_BUILD_IO_FBX=ON \
        -DMOMENTUM_BUILD_TESTING=ON \
        -DMOMENTUM_BUILD_EXAMPLES=ON \
        -DMOMENTUM_BUILD_PYMOMENTUM=$MOMENTUM_BUILD_PYMOMENTUM \
        -DMOMENTUM_ENABLE_PROFILING=ON \
        -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
        -DMOMENTUM_INSTALL_EXAMPLES=ON \
        -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
        -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
        -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
        -DMOMENTUM_USE_SYSTEM_TRACY=ON
    """, env = { FBXSDK_PATH = ".deps/fbxsdk", MOMENTUM_ENABLE_SIMD = "ON", MOMENTUM_BUILD_PYMOMENTUM = "ON" }, depends-on = [
    "install_deps",
] }
config_dev = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp/debug \
        -G Ninja \
        -DCMAKE_BUILD_TYPE=Debug \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DMOMENTUM_BUILD_IO_FBX=ON \
        -DMOMENTUM_BUILD_TESTING=ON \
        -DMOMENTUM_BUILD_EXAMPLES=ON \
        -DMOMENTUM_BUILD_PYMOMENTUM=$MOMENTUM_BUILD_PYMOMENTUM \
        -DMOMENTUM_ENABLE_PROFILING=ON \
        -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
        -DMOMENTUM_INSTALL_EXAMPLES=ON \
        -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
        -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
        -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
        -DMOMENTUM_USE_SYSTEM_TRACY=ON
    """, env = { FBXSDK_PATH = ".deps/fbxsdk", MOMENTUM_ENABLE_SIMD = "ON", MOMENTUM_BUILD_PYMOMENTUM = "ON" }, depends-on = [
    "install_deps",
] }
build_py = { cmd = "pip install . -vv", env = { FBXSDK_PATH = ".deps/fbxsdk", CMAKE_ARGS = """
    -DMOMENTUM_BUILD_IO_FBX=ON \
    -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
    -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
    -DMOMENTUM_USE_SYSTEM_PYBIND11=OFF \
    -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON
""", MOMENTUM_ENABLE_SIMD = "ON" }, depends-on = [
    "install_deps",
] }
test_py = { cmd = "pytest pymomentum/test/*.py", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
    "build_py",
] }
doc_py = { cmd = "sphinx-build -a -E -b html pymomentum/doc build/python_api_doc", depends-on = [
    "build_py",
] }
open_doc_py = { cmd = "open build/python_api_doc/index.html", depends-on = [
    "doc_py",
] }

#============
# osx-64
#============

[target.osx.build-dependencies]

[target.osx.dependencies]

[target.osx.tasks]
build_py = { cmd = "pip install . -vv", env = { CMAKE_ARGS = """
    -DMOMENTUM_BUILD_IO_FBX=$MOMENTUM_BUILD_IO_FBX \
    -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
    -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
    -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
    -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON
""", MOMENTUM_BUILD_IO_FBX = "OFF", MOMENTUM_ENABLE_SIMD = "ON" } }
# TODO: Remove -k option, once this tests are disabled programmatically if momentum is not built with FBX support
test_py = { cmd = "pytest pymomentum/test/*.py -k 'not (TestFBXIO and (test_save_motions_with_joint_params or test_save_motions_with_model_params))'", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
    "build_py",
] }
doc_py = { cmd = "sphinx-build -a -E -b html pymomentum/doc build/python_api_doc", depends-on = [
    "build_py",
] }
open_doc_py = { cmd = "open build/python_api_doc/index.html", depends-on = [
    "doc_py",
] }

#============
# osx-arm64
#============

[target.osx-arm64.build-dependencies]

[target.osx-arm64.dependencies]

[target.osx-arm64.tasks]
build_py = { cmd = "pip install . -vv", env = { CMAKE_ARGS = """
    -DMOMENTUM_BUILD_IO_FBX=$MOMENTUM_BUILD_IO_FBX \
    -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD \
    -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
    -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
    -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON
""", MOMENTUM_BUILD_IO_FBX = "OFF", MOMENTUM_ENABLE_SIMD = "ON" } }
# TODO: Remove -k option, once this tests are disabled programmatically if momentum is not built with FBX support
test_py = { cmd = "pytest pymomentum/test/*.py -k 'not (TestFBXIO and (test_save_motions_with_joint_params or test_save_motions_with_model_params))'", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
    "build_py",
] }
doc_py = { cmd = "sphinx-build -a -E -b html pymomentum/doc build/python_api_doc", depends-on = [
    "build_py",
] }
open_doc_py = { cmd = "open build/python_api_doc/index.html", depends-on = [
    "doc_py",
] }

#=========
# win-64
#=========

[target.win-64.dependencies]

[target.win-64.tasks]
config = { cmd = """
    cmake \
        -S . \
        -B build/$PIXI_ENVIRONMENT_NAME/cpp \
        -G 'Visual Studio 17 2022' \
        -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX \
        -DBUILD_SHARED_LIBS=ON \
        -DMOMENTUM_BUILD_EXAMPLES=ON \
        -DMOMENTUM_BUILD_IO_FBX=$MOMENTUM_BUILD_IO_FBX \
        -DMOMENTUM_BUILD_PYMOMENTUM=$MOMENTUM_BUILD_PYMOMENTUM \
        -DMOMENTUM_BUILD_TESTING=ON \
        -DMOMENTUM_ENABLE_PROFILING=ON \
        -DMOMENTUM_ENABLE_SIMD=%MOMENTUM_ENABLE_SIMD% \
        -DMOMENTUM_INSTALL_EXAMPLES=ON \
        -DMOMENTUM_USE_SYSTEM_GOOGLETEST=ON \
        -DMOMENTUM_USE_SYSTEM_PYBIND11=ON \
        -DMOMENTUM_USE_SYSTEM_RERUN_CPP_SDK=ON \
        -DMOMENTUM_USE_SYSTEM_TRACY=ON
    """, env = { MOMENTUM_BUILD_IO_FBX = "OFF", MOMENTUM_BUILD_PYMOMENTUM = "OFF", MOMENTUM_ENABLE_SIMD = "ON" } }
open_vs = { cmd = "cmd /c start build\\$PIXI_ENVIRONMENT_NAME\\cpp\\momentum.sln", depends-on = [
    "config",
] }
build = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp -j --config Release", depends-on = [
    "config",
] }
build_dev = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp -j --config Debug", depends-on = [
    "config",
] }
test = { cmd = "ctest --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp --output-on-failure --build-config Release", depends-on = [
    "build",
] }
test_dev = { cmd = "ctest --test-dir build/$PIXI_ENVIRONMENT_NAME/cpp --output-on-failure --build-config Debug", depends-on = [
    "build_dev",
] }
hello_world = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/hello_world.exe", depends-on = [
    "build",
] }
convert_model = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/convert_model.exe", depends-on = [
    "build",
] }
c3d_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/c3d_viewer.exe", depends-on = [
    "build",
] }
fbx_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/fbx_viewer.exe", depends-on = [
    "build",
] }
glb_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/glb_viewer.exe", depends-on = [
    "build",
] }
urdf_viewer = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/urdf_viewer.exe", depends-on = [
    "build",
] }
process_markers = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/process_markers_app.exe", depends-on = [
    "build",
] }
refine_motion = { cmd = "build/$PIXI_ENVIRONMENT_NAME/cpp/Release/refine_motion.exe", depends-on = [
    "build",
] }
install = { cmd = "cmake --build build/$PIXI_ENVIRONMENT_NAME/cpp -j --target install --config Release", depends-on = [
    "build",
] }
tracy = { cmd = "tracy-profiler.exe" }
build_py = { cmd = "pip install . -vv", env = { CMAKE_ARGS = """
    -DMOMENTUM_BUILD_IO_FBX=$MOMENTUM_BUILD_IO_FBX \
    -DMOMENTUM_ENABLE_SIMD=$MOMENTUM_ENABLE_SIMD
""", MOMENTUM_BUILD_IO_FBX = "OFF", MOMENTUM_ENABLE_SIMD = "ON" } }
# TODO: Remove -k option, once this tests are disabled programmatically if momentum is not built with FBX support
test_py = { cmd = "pytest pymomentum/test/*.py -k 'not (TestFBXIO and (test_save_motions_with_joint_params or test_save_motions_with_model_params))'", env = { MOMENTUM_MODELS_PATH = "momentum/" }, depends-on = [
    "build_py",
] }

#==============
# Feature: CPU
#==============

[feature.cpu]

#==============
# Feature: GPU
#==============

[feature.py312-cuda126]
platforms = ["linux-64", "win-64"]
system-requirements = { cuda = "12" }
build-dependencies = { cuda-toolkit = ">=12.6.3,<13", nvtx-c = ">=3.1.1" }
dependencies = { python = "3.12.*", pytorch-gpu = ">=2.6.0,<3" }

[feature.py311-cuda126]
platforms = ["linux-64", "win-64"]
system-requirements = { cuda = "12" }
build-dependencies = { cuda-toolkit = ">=12.6.3,<13", nvtx-c = ">=3.1.1" }
dependencies = { python = "3.11.*", pytorch-gpu = ">=2.6.0,<3" }

[feature.py310-cuda126]
platforms = ["linux-64", "win-64"]
system-requirements = { cuda = "12" }
build-dependencies = { cuda-toolkit = ">=12.6.3,<13", nvtx-c = ">=3.1.1" }
dependencies = { python = "3.10.*", pytorch-gpu = ">=2.6.0,<3" }

#==============
# Environments
#==============

[environments]
py312-cuda126 = ["py312-cuda126"]
py311-cuda126 = ["py311-cuda126"]
py310-cuda126 = ["py310-cuda126"]
gpu = ["py312-cuda126"]
cpu = ["cpu"]
default = ["cpu"]
