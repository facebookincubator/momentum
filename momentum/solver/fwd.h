/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This file is @generated by gen_fwd.py
// Do not edit this file directly, instead update gen_fwd_input.toml and run:
// buck run @arvr/mode/platform010/opt //arvr/libraries/momentum:gen_fwd

#pragma once

#include <memory>

namespace momentum {

struct SolverOptions;

using SolverOptions_p = ::std::shared_ptr<SolverOptions>;
using SolverOptions_u = ::std::unique_ptr<SolverOptions>;
using SolverOptions_w = ::std::weak_ptr<SolverOptions>;
using SolverOptions_const_p = ::std::shared_ptr<const SolverOptions>;
using SolverOptions_const_u = ::std::unique_ptr<const SolverOptions>;
using SolverOptions_const_w = ::std::weak_ptr<const SolverOptions>;

struct GaussNewtonSolverOptions;

using GaussNewtonSolverOptions_p = ::std::shared_ptr<GaussNewtonSolverOptions>;
using GaussNewtonSolverOptions_u = ::std::unique_ptr<GaussNewtonSolverOptions>;
using GaussNewtonSolverOptions_w = ::std::weak_ptr<GaussNewtonSolverOptions>;
using GaussNewtonSolverOptions_const_p = ::std::shared_ptr<const GaussNewtonSolverOptions>;
using GaussNewtonSolverOptions_const_u = ::std::unique_ptr<const GaussNewtonSolverOptions>;
using GaussNewtonSolverOptions_const_w = ::std::weak_ptr<const GaussNewtonSolverOptions>;

template <typename T>
class SolverT;
using Solver = SolverT<float>;
using Solverd = SolverT<double>;

using Solver_p = ::std::shared_ptr<Solver>;
using Solver_u = ::std::unique_ptr<Solver>;
using Solver_w = ::std::weak_ptr<Solver>;
using Solver_const_p = ::std::shared_ptr<const Solver>;
using Solver_const_u = ::std::unique_ptr<const Solver>;
using Solver_const_w = ::std::weak_ptr<const Solver>;

using Solverd_p = ::std::shared_ptr<Solverd>;
using Solverd_u = ::std::unique_ptr<Solverd>;
using Solverd_w = ::std::weak_ptr<Solverd>;
using Solverd_const_p = ::std::shared_ptr<const Solverd>;
using Solverd_const_u = ::std::unique_ptr<const Solverd>;
using Solverd_const_w = ::std::weak_ptr<const Solverd>;

template <typename T>
class SolverFunctionT;
using SolverFunction = SolverFunctionT<float>;
using SolverFunctiond = SolverFunctionT<double>;

using SolverFunction_p = ::std::shared_ptr<SolverFunction>;
using SolverFunction_u = ::std::unique_ptr<SolverFunction>;
using SolverFunction_w = ::std::weak_ptr<SolverFunction>;
using SolverFunction_const_p = ::std::shared_ptr<const SolverFunction>;
using SolverFunction_const_u = ::std::unique_ptr<const SolverFunction>;
using SolverFunction_const_w = ::std::weak_ptr<const SolverFunction>;

using SolverFunctiond_p = ::std::shared_ptr<SolverFunctiond>;
using SolverFunctiond_u = ::std::unique_ptr<SolverFunctiond>;
using SolverFunctiond_w = ::std::weak_ptr<SolverFunctiond>;
using SolverFunctiond_const_p = ::std::shared_ptr<const SolverFunctiond>;
using SolverFunctiond_const_u = ::std::unique_ptr<const SolverFunctiond>;
using SolverFunctiond_const_w = ::std::weak_ptr<const SolverFunctiond>;

template <typename T>
class GaussNewtonSolverT;
using GaussNewtonSolver = GaussNewtonSolverT<float>;
using GaussNewtonSolverd = GaussNewtonSolverT<double>;

using GaussNewtonSolver_p = ::std::shared_ptr<GaussNewtonSolver>;
using GaussNewtonSolver_u = ::std::unique_ptr<GaussNewtonSolver>;
using GaussNewtonSolver_w = ::std::weak_ptr<GaussNewtonSolver>;
using GaussNewtonSolver_const_p = ::std::shared_ptr<const GaussNewtonSolver>;
using GaussNewtonSolver_const_u = ::std::unique_ptr<const GaussNewtonSolver>;
using GaussNewtonSolver_const_w = ::std::weak_ptr<const GaussNewtonSolver>;

using GaussNewtonSolverd_p = ::std::shared_ptr<GaussNewtonSolverd>;
using GaussNewtonSolverd_u = ::std::unique_ptr<GaussNewtonSolverd>;
using GaussNewtonSolverd_w = ::std::weak_ptr<GaussNewtonSolverd>;
using GaussNewtonSolverd_const_p = ::std::shared_ptr<const GaussNewtonSolverd>;
using GaussNewtonSolverd_const_u = ::std::unique_ptr<const GaussNewtonSolverd>;
using GaussNewtonSolverd_const_w = ::std::weak_ptr<const GaussNewtonSolverd>;

template <typename T>
class GradientDescentSolverT;
using GradientDescentSolver = GradientDescentSolverT<float>;
using GradientDescentSolverd = GradientDescentSolverT<double>;

using GradientDescentSolver_p = ::std::shared_ptr<GradientDescentSolver>;
using GradientDescentSolver_u = ::std::unique_ptr<GradientDescentSolver>;
using GradientDescentSolver_w = ::std::weak_ptr<GradientDescentSolver>;
using GradientDescentSolver_const_p = ::std::shared_ptr<const GradientDescentSolver>;
using GradientDescentSolver_const_u = ::std::unique_ptr<const GradientDescentSolver>;
using GradientDescentSolver_const_w = ::std::weak_ptr<const GradientDescentSolver>;

using GradientDescentSolverd_p = ::std::shared_ptr<GradientDescentSolverd>;
using GradientDescentSolverd_u = ::std::unique_ptr<GradientDescentSolverd>;
using GradientDescentSolverd_w = ::std::weak_ptr<GradientDescentSolverd>;
using GradientDescentSolverd_const_p = ::std::shared_ptr<const GradientDescentSolverd>;
using GradientDescentSolverd_const_u = ::std::unique_ptr<const GradientDescentSolverd>;
using GradientDescentSolverd_const_w = ::std::weak_ptr<const GradientDescentSolverd>;

template <typename T>
class SubsetGaussNewtonSolverT;
using SubsetGaussNewtonSolver = SubsetGaussNewtonSolverT<float>;
using SubsetGaussNewtonSolverd = SubsetGaussNewtonSolverT<double>;

using SubsetGaussNewtonSolver_p = ::std::shared_ptr<SubsetGaussNewtonSolver>;
using SubsetGaussNewtonSolver_u = ::std::unique_ptr<SubsetGaussNewtonSolver>;
using SubsetGaussNewtonSolver_w = ::std::weak_ptr<SubsetGaussNewtonSolver>;
using SubsetGaussNewtonSolver_const_p = ::std::shared_ptr<const SubsetGaussNewtonSolver>;
using SubsetGaussNewtonSolver_const_u = ::std::unique_ptr<const SubsetGaussNewtonSolver>;
using SubsetGaussNewtonSolver_const_w = ::std::weak_ptr<const SubsetGaussNewtonSolver>;

using SubsetGaussNewtonSolverd_p = ::std::shared_ptr<SubsetGaussNewtonSolverd>;
using SubsetGaussNewtonSolverd_u = ::std::unique_ptr<SubsetGaussNewtonSolverd>;
using SubsetGaussNewtonSolverd_w = ::std::weak_ptr<SubsetGaussNewtonSolverd>;
using SubsetGaussNewtonSolverd_const_p = ::std::shared_ptr<const SubsetGaussNewtonSolverd>;
using SubsetGaussNewtonSolverd_const_u = ::std::unique_ptr<const SubsetGaussNewtonSolverd>;
using SubsetGaussNewtonSolverd_const_w = ::std::weak_ptr<const SubsetGaussNewtonSolverd>;

} // namespace momentum
