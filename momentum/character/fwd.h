/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This file is @generated by gen_fwd.py
// Do not edit this file directly, instead update gen_fwd_input.toml and run:
// buck run @arvr/mode/platform010/opt //arvr/libraries/momentum:gen_fwd

#pragma once

#include <momentum/common/memory.h>

#include <memory>

namespace momentum {


struct BlendShape;

using BlendShape_p = ::std::shared_ptr<BlendShape>;
using BlendShape_u = ::std::unique_ptr<BlendShape>;
using BlendShape_w = ::std::weak_ptr<BlendShape>;
using BlendShape_const_p = ::std::shared_ptr<const BlendShape>;
using BlendShape_const_u = ::std::unique_ptr<const BlendShape>;
using BlendShape_const_w = ::std::weak_ptr<const BlendShape>;


struct BlendShapeBase;

using BlendShapeBase_p = ::std::shared_ptr<BlendShapeBase>;
using BlendShapeBase_u = ::std::unique_ptr<BlendShapeBase>;
using BlendShapeBase_w = ::std::weak_ptr<BlendShapeBase>;
using BlendShapeBase_const_p = ::std::shared_ptr<const BlendShapeBase>;
using BlendShapeBase_const_u = ::std::unique_ptr<const BlendShapeBase>;
using BlendShapeBase_const_w = ::std::weak_ptr<const BlendShapeBase>;


struct PoseShape;

using PoseShape_p = ::std::shared_ptr<PoseShape>;
using PoseShape_u = ::std::unique_ptr<PoseShape>;
using PoseShape_w = ::std::weak_ptr<PoseShape>;
using PoseShape_const_p = ::std::shared_ptr<const PoseShape>;
using PoseShape_const_u = ::std::unique_ptr<const PoseShape>;
using PoseShape_const_w = ::std::weak_ptr<const PoseShape>;


struct SkinWeights;

using SkinWeights_p = ::std::shared_ptr<SkinWeights>;
using SkinWeights_u = ::std::unique_ptr<SkinWeights>;
using SkinWeights_w = ::std::weak_ptr<SkinWeights>;
using SkinWeights_const_p = ::std::shared_ptr<const SkinWeights>;
using SkinWeights_const_u = ::std::unique_ptr<const SkinWeights>;
using SkinWeights_const_w = ::std::weak_ptr<const SkinWeights>;



template <typename T>
struct CharacterT;
using Character = CharacterT<float>;
using Characterd = CharacterT<double>;

using Character_p = ::std::shared_ptr<Character>;
using Character_u = ::std::unique_ptr<Character>;
using Character_w = ::std::weak_ptr<Character>;
using Character_const_p = ::std::shared_ptr<const Character>;
using Character_const_u = ::std::unique_ptr<const Character>;
using Character_const_w = ::std::weak_ptr<const Character>;


using Characterd_p = ::std::shared_ptr<Characterd>;
using Characterd_u = ::std::unique_ptr<Characterd>;
using Characterd_w = ::std::weak_ptr<Characterd>;
using Characterd_const_p = ::std::shared_ptr<const Characterd>;
using Characterd_const_u = ::std::unique_ptr<const Characterd>;
using Characterd_const_w = ::std::weak_ptr<const Characterd>;


template <typename T>
struct CharacterStateT;
using CharacterState = CharacterStateT<float>;
using CharacterStated = CharacterStateT<double>;

using CharacterState_p = ::std::shared_ptr<CharacterState>;
using CharacterState_u = ::std::unique_ptr<CharacterState>;
using CharacterState_w = ::std::weak_ptr<CharacterState>;
using CharacterState_const_p = ::std::shared_ptr<const CharacterState>;
using CharacterState_const_u = ::std::unique_ptr<const CharacterState>;
using CharacterState_const_w = ::std::weak_ptr<const CharacterState>;


using CharacterStated_p = ::std::shared_ptr<CharacterStated>;
using CharacterStated_u = ::std::unique_ptr<CharacterStated>;
using CharacterStated_w = ::std::weak_ptr<CharacterStated>;
using CharacterStated_const_p = ::std::shared_ptr<const CharacterStated>;
using CharacterStated_const_u = ::std::unique_ptr<const CharacterStated>;
using CharacterStated_const_w = ::std::weak_ptr<const CharacterStated>;


template <typename T>
struct CollisionGeometryStateT;
using CollisionGeometryState = CollisionGeometryStateT<float>;
using CollisionGeometryStated = CollisionGeometryStateT<double>;

using CollisionGeometryState_p = ::std::shared_ptr<CollisionGeometryState>;
using CollisionGeometryState_u = ::std::unique_ptr<CollisionGeometryState>;
using CollisionGeometryState_w = ::std::weak_ptr<CollisionGeometryState>;
using CollisionGeometryState_const_p = ::std::shared_ptr<const CollisionGeometryState>;
using CollisionGeometryState_const_u = ::std::unique_ptr<const CollisionGeometryState>;
using CollisionGeometryState_const_w = ::std::weak_ptr<const CollisionGeometryState>;


using CollisionGeometryStated_p = ::std::shared_ptr<CollisionGeometryStated>;
using CollisionGeometryStated_u = ::std::unique_ptr<CollisionGeometryStated>;
using CollisionGeometryStated_w = ::std::weak_ptr<CollisionGeometryStated>;
using CollisionGeometryStated_const_p = ::std::shared_ptr<const CollisionGeometryStated>;
using CollisionGeometryStated_const_u = ::std::unique_ptr<const CollisionGeometryStated>;
using CollisionGeometryStated_const_w = ::std::weak_ptr<const CollisionGeometryStated>;


template <typename T>
struct JointT;
using Joint = JointT<float>;
using Jointd = JointT<double>;

using Joint_p = ::std::shared_ptr<Joint>;
using Joint_u = ::std::unique_ptr<Joint>;
using Joint_w = ::std::weak_ptr<Joint>;
using Joint_const_p = ::std::shared_ptr<const Joint>;
using Joint_const_u = ::std::unique_ptr<const Joint>;
using Joint_const_w = ::std::weak_ptr<const Joint>;


using Jointd_p = ::std::shared_ptr<Jointd>;
using Jointd_u = ::std::unique_ptr<Jointd>;
using Jointd_w = ::std::weak_ptr<Jointd>;
using Jointd_const_p = ::std::shared_ptr<const Jointd>;
using Jointd_const_u = ::std::unique_ptr<const Jointd>;
using Jointd_const_w = ::std::weak_ptr<const Jointd>;


template <typename T>
struct JointStateT;
using JointState = JointStateT<float>;
using JointStated = JointStateT<double>;

using JointState_p = ::std::shared_ptr<JointState>;
using JointState_u = ::std::unique_ptr<JointState>;
using JointState_w = ::std::weak_ptr<JointState>;
using JointState_const_p = ::std::shared_ptr<const JointState>;
using JointState_const_u = ::std::unique_ptr<const JointState>;
using JointState_const_w = ::std::weak_ptr<const JointState>;


using JointStated_p = ::std::shared_ptr<JointStated>;
using JointStated_u = ::std::unique_ptr<JointStated>;
using JointStated_w = ::std::weak_ptr<JointStated>;
using JointStated_const_p = ::std::shared_ptr<const JointStated>;
using JointStated_const_u = ::std::unique_ptr<const JointStated>;
using JointStated_const_w = ::std::weak_ptr<const JointStated>;


template <typename T>
struct ParameterTransformT;
using ParameterTransform = ParameterTransformT<float>;
using ParameterTransformd = ParameterTransformT<double>;

using ParameterTransform_p = ::std::shared_ptr<ParameterTransform>;
using ParameterTransform_u = ::std::unique_ptr<ParameterTransform>;
using ParameterTransform_w = ::std::weak_ptr<ParameterTransform>;
using ParameterTransform_const_p = ::std::shared_ptr<const ParameterTransform>;
using ParameterTransform_const_u = ::std::unique_ptr<const ParameterTransform>;
using ParameterTransform_const_w = ::std::weak_ptr<const ParameterTransform>;


using ParameterTransformd_p = ::std::shared_ptr<ParameterTransformd>;
using ParameterTransformd_u = ::std::unique_ptr<ParameterTransformd>;
using ParameterTransformd_w = ::std::weak_ptr<ParameterTransformd>;
using ParameterTransformd_const_p = ::std::shared_ptr<const ParameterTransformd>;
using ParameterTransformd_const_u = ::std::unique_ptr<const ParameterTransformd>;
using ParameterTransformd_const_w = ::std::weak_ptr<const ParameterTransformd>;


template <typename T>
struct SkeletonT;
using Skeleton = SkeletonT<float>;
using Skeletond = SkeletonT<double>;

using Skeleton_p = ::std::shared_ptr<Skeleton>;
using Skeleton_u = ::std::unique_ptr<Skeleton>;
using Skeleton_w = ::std::weak_ptr<Skeleton>;
using Skeleton_const_p = ::std::shared_ptr<const Skeleton>;
using Skeleton_const_u = ::std::unique_ptr<const Skeleton>;
using Skeleton_const_w = ::std::weak_ptr<const Skeleton>;


using Skeletond_p = ::std::shared_ptr<Skeletond>;
using Skeletond_u = ::std::unique_ptr<Skeletond>;
using Skeletond_w = ::std::weak_ptr<Skeletond>;
using Skeletond_const_p = ::std::shared_ptr<const Skeletond>;
using Skeletond_const_u = ::std::unique_ptr<const Skeletond>;
using Skeletond_const_w = ::std::weak_ptr<const Skeletond>;


template <typename T>
struct SkeletonStateT;
using SkeletonState = SkeletonStateT<float>;
using SkeletonStated = SkeletonStateT<double>;

using SkeletonState_p = ::std::shared_ptr<SkeletonState>;
using SkeletonState_u = ::std::unique_ptr<SkeletonState>;
using SkeletonState_w = ::std::weak_ptr<SkeletonState>;
using SkeletonState_const_p = ::std::shared_ptr<const SkeletonState>;
using SkeletonState_const_u = ::std::unique_ptr<const SkeletonState>;
using SkeletonState_const_w = ::std::weak_ptr<const SkeletonState>;


using SkeletonStated_p = ::std::shared_ptr<SkeletonStated>;
using SkeletonStated_u = ::std::unique_ptr<SkeletonStated>;
using SkeletonStated_w = ::std::weak_ptr<SkeletonStated>;
using SkeletonStated_const_p = ::std::shared_ptr<const SkeletonStated>;
using SkeletonStated_const_u = ::std::unique_ptr<const SkeletonStated>;
using SkeletonStated_const_w = ::std::weak_ptr<const SkeletonStated>;


template <typename T>
struct TaperedCapsuleT;
using TaperedCapsule = TaperedCapsuleT<float>;
using TaperedCapsuled = TaperedCapsuleT<double>;

using TaperedCapsule_p = ::std::shared_ptr<TaperedCapsule>;
using TaperedCapsule_u = ::std::unique_ptr<TaperedCapsule>;
using TaperedCapsule_w = ::std::weak_ptr<TaperedCapsule>;
using TaperedCapsule_const_p = ::std::shared_ptr<const TaperedCapsule>;
using TaperedCapsule_const_u = ::std::unique_ptr<const TaperedCapsule>;
using TaperedCapsule_const_w = ::std::weak_ptr<const TaperedCapsule>;


using TaperedCapsuled_p = ::std::shared_ptr<TaperedCapsuled>;
using TaperedCapsuled_u = ::std::unique_ptr<TaperedCapsuled>;
using TaperedCapsuled_w = ::std::weak_ptr<TaperedCapsuled>;
using TaperedCapsuled_const_p = ::std::shared_ptr<const TaperedCapsuled>;
using TaperedCapsuled_const_u = ::std::unique_ptr<const TaperedCapsuled>;
using TaperedCapsuled_const_w = ::std::weak_ptr<const TaperedCapsuled>;




} // namespace momentum
