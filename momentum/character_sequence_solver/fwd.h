/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This file is @generated by gen_fwd.py
// Do not edit this file directly, instead update gen_fwd_input.toml and run:
// buck run @arvr/mode/platform010/opt //arvr/libraries/momentum:gen_fwd

#pragma once

#include <memory>

namespace momentum {

struct MultiposeSolverOptions;

using MultiposeSolverOptions_p = ::std::shared_ptr<MultiposeSolverOptions>;
using MultiposeSolverOptions_u = ::std::unique_ptr<MultiposeSolverOptions>;
using MultiposeSolverOptions_w = ::std::weak_ptr<MultiposeSolverOptions>;
using MultiposeSolverOptions_const_p = ::std::shared_ptr<const MultiposeSolverOptions>;
using MultiposeSolverOptions_const_u = ::std::unique_ptr<const MultiposeSolverOptions>;
using MultiposeSolverOptions_const_w = ::std::weak_ptr<const MultiposeSolverOptions>;

struct SequenceSolverOptions;

using SequenceSolverOptions_p = ::std::shared_ptr<SequenceSolverOptions>;
using SequenceSolverOptions_u = ::std::unique_ptr<SequenceSolverOptions>;
using SequenceSolverOptions_w = ::std::weak_ptr<SequenceSolverOptions>;
using SequenceSolverOptions_const_p = ::std::shared_ptr<const SequenceSolverOptions>;
using SequenceSolverOptions_const_u = ::std::unique_ptr<const SequenceSolverOptions>;
using SequenceSolverOptions_const_w = ::std::weak_ptr<const SequenceSolverOptions>;

template <typename T>
class SequenceErrorFunctionT;
using SequenceErrorFunction = SequenceErrorFunctionT<float>;
using SequenceErrorFunctiond = SequenceErrorFunctionT<double>;

using SequenceErrorFunction_p = ::std::shared_ptr<SequenceErrorFunction>;
using SequenceErrorFunction_u = ::std::unique_ptr<SequenceErrorFunction>;
using SequenceErrorFunction_w = ::std::weak_ptr<SequenceErrorFunction>;
using SequenceErrorFunction_const_p = ::std::shared_ptr<const SequenceErrorFunction>;
using SequenceErrorFunction_const_u = ::std::unique_ptr<const SequenceErrorFunction>;
using SequenceErrorFunction_const_w = ::std::weak_ptr<const SequenceErrorFunction>;

using SequenceErrorFunctiond_p = ::std::shared_ptr<SequenceErrorFunctiond>;
using SequenceErrorFunctiond_u = ::std::unique_ptr<SequenceErrorFunctiond>;
using SequenceErrorFunctiond_w = ::std::weak_ptr<SequenceErrorFunctiond>;
using SequenceErrorFunctiond_const_p = ::std::shared_ptr<const SequenceErrorFunctiond>;
using SequenceErrorFunctiond_const_u = ::std::unique_ptr<const SequenceErrorFunctiond>;
using SequenceErrorFunctiond_const_w = ::std::weak_ptr<const SequenceErrorFunctiond>;

template <typename T>
class ModelParametersSequenceErrorFunctionT;
using ModelParametersSequenceErrorFunction = ModelParametersSequenceErrorFunctionT<float>;
using ModelParametersSequenceErrorFunctiond = ModelParametersSequenceErrorFunctionT<double>;

using ModelParametersSequenceErrorFunction_p =
    ::std::shared_ptr<ModelParametersSequenceErrorFunction>;
using ModelParametersSequenceErrorFunction_u =
    ::std::unique_ptr<ModelParametersSequenceErrorFunction>;
using ModelParametersSequenceErrorFunction_w =
    ::std::weak_ptr<ModelParametersSequenceErrorFunction>;
using ModelParametersSequenceErrorFunction_const_p =
    ::std::shared_ptr<const ModelParametersSequenceErrorFunction>;
using ModelParametersSequenceErrorFunction_const_u =
    ::std::unique_ptr<const ModelParametersSequenceErrorFunction>;
using ModelParametersSequenceErrorFunction_const_w =
    ::std::weak_ptr<const ModelParametersSequenceErrorFunction>;

using ModelParametersSequenceErrorFunctiond_p =
    ::std::shared_ptr<ModelParametersSequenceErrorFunctiond>;
using ModelParametersSequenceErrorFunctiond_u =
    ::std::unique_ptr<ModelParametersSequenceErrorFunctiond>;
using ModelParametersSequenceErrorFunctiond_w =
    ::std::weak_ptr<ModelParametersSequenceErrorFunctiond>;
using ModelParametersSequenceErrorFunctiond_const_p =
    ::std::shared_ptr<const ModelParametersSequenceErrorFunctiond>;
using ModelParametersSequenceErrorFunctiond_const_u =
    ::std::unique_ptr<const ModelParametersSequenceErrorFunctiond>;
using ModelParametersSequenceErrorFunctiond_const_w =
    ::std::weak_ptr<const ModelParametersSequenceErrorFunctiond>;

template <typename T>
class MultiposeSolverT;
using MultiposeSolver = MultiposeSolverT<float>;
using MultiposeSolverd = MultiposeSolverT<double>;

using MultiposeSolver_p = ::std::shared_ptr<MultiposeSolver>;
using MultiposeSolver_u = ::std::unique_ptr<MultiposeSolver>;
using MultiposeSolver_w = ::std::weak_ptr<MultiposeSolver>;
using MultiposeSolver_const_p = ::std::shared_ptr<const MultiposeSolver>;
using MultiposeSolver_const_u = ::std::unique_ptr<const MultiposeSolver>;
using MultiposeSolver_const_w = ::std::weak_ptr<const MultiposeSolver>;

using MultiposeSolverd_p = ::std::shared_ptr<MultiposeSolverd>;
using MultiposeSolverd_u = ::std::unique_ptr<MultiposeSolverd>;
using MultiposeSolverd_w = ::std::weak_ptr<MultiposeSolverd>;
using MultiposeSolverd_const_p = ::std::shared_ptr<const MultiposeSolverd>;
using MultiposeSolverd_const_u = ::std::unique_ptr<const MultiposeSolverd>;
using MultiposeSolverd_const_w = ::std::weak_ptr<const MultiposeSolverd>;

template <typename T>
class MultiposeSolverFunctionT;
using MultiposeSolverFunction = MultiposeSolverFunctionT<float>;
using MultiposeSolverFunctiond = MultiposeSolverFunctionT<double>;

using MultiposeSolverFunction_p = ::std::shared_ptr<MultiposeSolverFunction>;
using MultiposeSolverFunction_u = ::std::unique_ptr<MultiposeSolverFunction>;
using MultiposeSolverFunction_w = ::std::weak_ptr<MultiposeSolverFunction>;
using MultiposeSolverFunction_const_p = ::std::shared_ptr<const MultiposeSolverFunction>;
using MultiposeSolverFunction_const_u = ::std::unique_ptr<const MultiposeSolverFunction>;
using MultiposeSolverFunction_const_w = ::std::weak_ptr<const MultiposeSolverFunction>;

using MultiposeSolverFunctiond_p = ::std::shared_ptr<MultiposeSolverFunctiond>;
using MultiposeSolverFunctiond_u = ::std::unique_ptr<MultiposeSolverFunctiond>;
using MultiposeSolverFunctiond_w = ::std::weak_ptr<MultiposeSolverFunctiond>;
using MultiposeSolverFunctiond_const_p = ::std::shared_ptr<const MultiposeSolverFunctiond>;
using MultiposeSolverFunctiond_const_u = ::std::unique_ptr<const MultiposeSolverFunctiond>;
using MultiposeSolverFunctiond_const_w = ::std::weak_ptr<const MultiposeSolverFunctiond>;

template <typename T>
class SequenceSolverT;
using SequenceSolver = SequenceSolverT<float>;
using SequenceSolverd = SequenceSolverT<double>;

using SequenceSolver_p = ::std::shared_ptr<SequenceSolver>;
using SequenceSolver_u = ::std::unique_ptr<SequenceSolver>;
using SequenceSolver_w = ::std::weak_ptr<SequenceSolver>;
using SequenceSolver_const_p = ::std::shared_ptr<const SequenceSolver>;
using SequenceSolver_const_u = ::std::unique_ptr<const SequenceSolver>;
using SequenceSolver_const_w = ::std::weak_ptr<const SequenceSolver>;

using SequenceSolverd_p = ::std::shared_ptr<SequenceSolverd>;
using SequenceSolverd_u = ::std::unique_ptr<SequenceSolverd>;
using SequenceSolverd_w = ::std::weak_ptr<SequenceSolverd>;
using SequenceSolverd_const_p = ::std::shared_ptr<const SequenceSolverd>;
using SequenceSolverd_const_u = ::std::unique_ptr<const SequenceSolverd>;
using SequenceSolverd_const_w = ::std::weak_ptr<const SequenceSolverd>;

template <typename T>
class SequenceSolverFunctionT;
using SequenceSolverFunction = SequenceSolverFunctionT<float>;
using SequenceSolverFunctiond = SequenceSolverFunctionT<double>;

using SequenceSolverFunction_p = ::std::shared_ptr<SequenceSolverFunction>;
using SequenceSolverFunction_u = ::std::unique_ptr<SequenceSolverFunction>;
using SequenceSolverFunction_w = ::std::weak_ptr<SequenceSolverFunction>;
using SequenceSolverFunction_const_p = ::std::shared_ptr<const SequenceSolverFunction>;
using SequenceSolverFunction_const_u = ::std::unique_ptr<const SequenceSolverFunction>;
using SequenceSolverFunction_const_w = ::std::weak_ptr<const SequenceSolverFunction>;

using SequenceSolverFunctiond_p = ::std::shared_ptr<SequenceSolverFunctiond>;
using SequenceSolverFunctiond_u = ::std::unique_ptr<SequenceSolverFunctiond>;
using SequenceSolverFunctiond_w = ::std::weak_ptr<SequenceSolverFunctiond>;
using SequenceSolverFunctiond_const_p = ::std::shared_ptr<const SequenceSolverFunctiond>;
using SequenceSolverFunctiond_const_u = ::std::unique_ptr<const SequenceSolverFunctiond>;
using SequenceSolverFunctiond_const_w = ::std::weak_ptr<const SequenceSolverFunctiond>;

template <typename T>
class StateSequenceErrorFunctionT;
using StateSequenceErrorFunction = StateSequenceErrorFunctionT<float>;
using StateSequenceErrorFunctiond = StateSequenceErrorFunctionT<double>;

using StateSequenceErrorFunction_p = ::std::shared_ptr<StateSequenceErrorFunction>;
using StateSequenceErrorFunction_u = ::std::unique_ptr<StateSequenceErrorFunction>;
using StateSequenceErrorFunction_w = ::std::weak_ptr<StateSequenceErrorFunction>;
using StateSequenceErrorFunction_const_p = ::std::shared_ptr<const StateSequenceErrorFunction>;
using StateSequenceErrorFunction_const_u = ::std::unique_ptr<const StateSequenceErrorFunction>;
using StateSequenceErrorFunction_const_w = ::std::weak_ptr<const StateSequenceErrorFunction>;

using StateSequenceErrorFunctiond_p = ::std::shared_ptr<StateSequenceErrorFunctiond>;
using StateSequenceErrorFunctiond_u = ::std::unique_ptr<StateSequenceErrorFunctiond>;
using StateSequenceErrorFunctiond_w = ::std::weak_ptr<StateSequenceErrorFunctiond>;
using StateSequenceErrorFunctiond_const_p = ::std::shared_ptr<const StateSequenceErrorFunctiond>;
using StateSequenceErrorFunctiond_const_u = ::std::unique_ptr<const StateSequenceErrorFunctiond>;
using StateSequenceErrorFunctiond_const_w = ::std::weak_ptr<const StateSequenceErrorFunctiond>;

} // namespace momentum
